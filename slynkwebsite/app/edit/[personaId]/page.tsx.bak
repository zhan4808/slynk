"use client"

import { useState, useRef, useEffect } from "react"
import { useParams, useRouter } from "next/navigation"
import { useSession } from "next-auth/react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Label } from "@/components/ui/label"
import { 
  Loader2, ArrowLeft, Save, Upload, Check, Play, X,
  Mic, Image as ImageIcon, UserRound, Sparkles, RefreshCw,
  Volume2, User, Settings, InformationCircle, CheckCircle, AlertCircle, MessageSquare
} from "lucide-react"
import Link from "next/link"
import Image from "next/image"
import { toast } from "@/components/ui/use-toast"
import { motion, AnimatePresence } from "framer-motion"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue, SelectGroup, SelectLabel } from "@/components/ui/select"
import { 
  generateFaceId, 
  generateVideoPreview, 
  DEFAULT_FACE_ID,
  checkFaceGenerationStatus 
} from "@/lib/simli-api"
import { DynamicNavbar } from "@/components/dynamic-navbar"
import { elevenLabsVoices, DEFAULT_VOICE } from '@/lib/voice-options'
import { Slider } from "@/components/ui/slider"

interface PersonaFormData {
  id?: string
  name: string
  description: string
  firstMessage: string
  faceId: string
  voice: string
  useCustomVoice: boolean
  productName: string
  productDescription: string
  productLink: string
  originalCharacterId?: string
  isCustomFaceInQueue?: boolean
}

interface PersonaData {
  id: string
  name: string
  description: string
  pageLink?: string
  adImage?: File | null
  voiceSample?: File | null
  systemPrompt?: string
  firstMessage?: string
  faceId?: string
  voice?: string
  qaPairs: Array<{
    id: string
    question: string
    answer: string
  }>
  productName?: string
  productDescription?: string
  productLink?: string
}

export default function EditPersonaPage() {
  const params = useParams()
  const router = useRouter()
  const { data: session, status } = useSession()
  const [loading, setLoading] = useState(true)
  const [persona, setPersona] = useState<PersonaData | null>(null)
  const [error, setError] = useState<string | null>(null)

  // If not authenticated, redirect to sign-in
  useEffect(() => {
    if (status === "unauthenticated") {
      router.push("/signin?callbackUrl=/edit/" + params.personaId)
    }
  }, [status, router, params.personaId])

  // Fetch persona data
  useEffect(() => {
    const fetchPersona = async () => {
      if (status !== "authenticated" || !params.personaId) return
      
      try {
        setLoading(true)
        const response = await fetch(`/api/personas/${params.personaId}`)
        
        if (!response.ok) {
          if (response.status === 404) {
            throw new Error("Persona not found")
          } else {
            throw new Error(`Error fetching persona: ${response.status}`)
          }
        }
        
        const data = await response.json()
        setPersona({
          id: data.id,
          name: data.name || data.productName,
          description: data.description,
          pageLink: data.pageLink,
          faceId: data.faceId,
          systemPrompt: data.systemPrompt,
          firstMessage: data.firstMessage,
          voice: data.voice || DEFAULT_VOICE,
          qaPairs: data.qaPairs || [],
          productName: data.productName,
          productDescription: data.productDescription,
          productLink: data.productLink
        })
      } catch (error) {
        console.error("Error fetching persona:", error)
        setError(error instanceof Error ? error.message : "Failed to load persona")
      } finally {
        setLoading(false)
      }
    }

    fetchPersona()
  }, [params.personaId, status])

  // Show loading or return null while checking authentication status
  if (status === "loading" || status === "unauthenticated") {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-pulse flex flex-col items-center">
          <div className="w-12 h-12 rounded-full bg-purple-200 mb-4"></div>
          <div className="h-4 w-32 bg-purple-100 rounded"></div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-slate-50 to-purple-50">
      <DynamicNavbar />
      
      <div className="container mx-auto max-w-6xl px-4 pt-24 pb-16">
        <div className="w-full max-w-5xl mx-auto">
          <div className="flex items-center justify-between mb-8">
            <motion.h1 
              className="text-4xl font-bold bg-gradient-to-r from-pink-500 to-violet-500 bg-clip-text text-transparent"
              initial={{ opacity: 0, y: -20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
            >
              Edit AI Persona
            </motion.h1>
            
            <Link href="/dashboard">
              <Button variant="outline" className="rounded-full border-2 border-gray-200 hover:border-gray-300">
                <ArrowLeft size={16} className="mr-2" />
                Back to Dashboard
              </Button>
            </Link>
          </div>
          
          {loading ? (
            <div className="flex items-center justify-center py-12">
              <Loader2 className="h-8 w-8 animate-spin text-gray-400" />
            </div>
          ) : error ? (
            <div className="bg-red-50 border border-red-200 rounded-lg p-4 text-red-600">
              {error}
            </div>
          ) : persona ? (
            <EditPersonaForm persona={persona} personaId={params.personaId as string} />
          ) : null}
        </div>
      </div>
    </div>
  )
}

interface EditPersonaFormProps {
  persona: PersonaData;
  personaId: string;
}

function EditPersonaForm({ persona, personaId }: EditPersonaFormProps) {
  const router = useRouter()
  const [loading, setLoading] = useState(false)
  const [formData, setFormData] = useState<PersonaFormData>({
    id: persona.id,
    name: persona.name || "",
    description: persona.description,
    firstMessage: persona.firstMessage || "",
    faceId: persona.faceId || "",
    voice: persona.voice || DEFAULT_VOICE,
    useCustomVoice: false,
    productName: persona.productName || "",
    productDescription: persona.productDescription || "",
    productLink: persona.productLink || "",
  })
  const [image, setImage] = useState<File | null>(null)
  const [previewImage, setPreviewImage] = useState<string | null>(null)
  const [isGeneratingFace, setIsGeneratingFace] = useState(false)
  const [isGeneratingAvatar, setIsGeneratingAvatar] = useState(false)
  const [videoPreview, setVideoPreview] = useState<{ mp4Url: string } | null>(null)
  const [isGeneratingPreview, setIsGeneratingPreview] = useState(false)
  const [activeStep, setActiveStep] = useState(1)
  const [error, setError] = useState<string | null>(null)
  const [successMessage, setSuccessMessage] = useState<string | null>(null)
  const [isPreviewGenerated, setIsPreviewGenerated] = useState(false)
  const [isCustomFaceInQueue, setIsCustomFaceInQueue] = useState(false)
  const [faceGenerationStatus, setFaceGenerationStatus] = useState<{
    isReady: boolean,
    progress: number,
    message: string,
    lastChecked: number,
    faceId?: string,
    failed?: boolean,
    status?: string
  }>({
    isReady: false,
    progress: 0,
    message: 'Not started',
    lastChecked: Date.now()
  })
  const [originalFaceResponse, setOriginalFaceResponse] = useState<any>(null)
  const [isPollingActive, setIsPollingActive] = useState(false)
  const pollingTimeoutRef = useRef<NodeJS.Timeout | null>(null)
  const fileInputRef = useRef<HTMLInputElement>(null)
  
  // Voice upload
  const [voiceFile, setVoiceFile] = useState<File | null>(null)
  const [isUploadingVoice, setIsUploadingVoice] = useState(false)
  const [voicePreviewUrl, setVoicePreviewUrl] = useState<string | null>(null)
  const voiceInputRef = useRef<HTMLInputElement>(null)
  
  // Processing timer
  const processingTimerRef = useRef<NodeJS.Timeout | null>(null);
  const [processingTime, setProcessingTime] = useState(0);
  
  // Helper function to format time as mm:ss
  const formatTime = (seconds: number): string => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };
  
  // Load persona image if available
  useEffect(() => {
    // If persona has faceId, set active step to at least 2
    if (persona.faceId) {
      setActiveStep(Math.max(activeStep, 2))
    }
    
    // Try to fetch the existing face image if available
    if (persona.faceId) {
      // Check if we have an existing preview for this persona
      const checkForExistingPreview = async () => {
        try {
          // For this example, we'll just set isPreviewGenerated to true
          // In a real implementation, you might want to check if a preview exists
          setIsPreviewGenerated(true)
        } catch (error) {
          console.error("Error checking for existing preview:", error)
        }
      }
      
      checkForExistingPreview()
    }
  }, [persona])
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)
    setError(null)
    
    try {
      // Check if we have a face ID
      if (!formData.faceId) {
        // Set default face ID if none exists
        setFormData(prev => ({
          ...prev,
          faceId: DEFAULT_FACE_ID
        }))
      }
      
      // Generate system prompt from product and persona information
      const systemPrompt = generateSystemPrompt(
        formData.name, 
        formData.description,
        formData.productName || undefined,
        formData.productDescription || undefined,
        formData.productLink || undefined
      )
      
      const firstMessage = formData.firstMessage || 
        `Hello, I'm ${formData.name}. How can I help you with ${formData.productName || 'your questions'} today?`
      
      // Create form data for file upload if we have a custom voice
      let voiceDataUrl = null;
      
      if (formData.useCustomVoice && voiceFile) {
        console.log("Using custom voice sample:", voiceFile.name);
        
        // Convert the audio file to a data URL for processing
        try {
          voiceDataUrl = await new Promise<string>((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = () => resolve(reader.result as string);
            reader.onerror = reject;
            reader.readAsDataURL(voiceFile);
          });
        } catch (error) {
          console.error("Error reading voice file:", error);
          // If there's an error, continue without the custom voice
          setError("Could not process voice file. Using default voice instead.");
          // Wait 3 seconds to let user see the error message
          await new Promise(resolve => setTimeout(resolve, 3000));
        }
      }
      
      console.log("Updating persona with settings:", {
        name: formData.name,
        description: formData.description,
        productName: formData.productName || 'N/A',
        productDescription: formData.productDescription ? (formData.productDescription.substring(0, 50) + "...") : 'N/A',
        productLink: formData.productLink || 'N/A',
        faceId: formData.faceId || DEFAULT_FACE_ID,
        originalCharacterId: isCustomFaceInQueue ? originalFaceResponse?.character_uid : undefined,
        voice: formData.voice,
        hasVoiceFile: !!voiceDataUrl,
        systemPrompt: systemPrompt.substring(0, 50) + "...",
        firstMessage: firstMessage
      })
      
      // Prepare data for API request
      const formDataToSend = new FormData()
      
      // Text fields
      formDataToSend.append("name", formData.name)
      formDataToSend.append("description", formData.description)
      formDataToSend.append("systemPrompt", systemPrompt)
      formDataToSend.append("firstMessage", firstMessage)
      formDataToSend.append("faceId", formData.faceId || DEFAULT_FACE_ID)
      formDataToSend.append("voice", formData.voice)
      formDataToSend.append("useCustomVoice", formData.useCustomVoice.toString())
      
      if (formData.productName) {
        formDataToSend.append("productName", formData.productName)
      }
      
      if (formData.productDescription) {
        formDataToSend.append("productDescription", formData.productDescription)
      }
      
      if (formData.productLink) {
        formDataToSend.append("productLink", formData.productLink)
      }
      
      if (isCustomFaceInQueue && originalFaceResponse?.character_uid) {
        formDataToSend.append("originalCharacterId", originalFaceResponse.character_uid)
      }
      
      formDataToSend.append("isCustomFaceInQueue", isCustomFaceInQueue.toString())
      
      // Append files if any
      if (image) {
        formDataToSend.append("image", image)
      }
      
      // Append voice data if available
      if (voiceDataUrl) {
        formDataToSend.append("voiceData", voiceDataUrl)
      }
      
      // Send the update request
      const response = await fetch(`/api/personas/${personaId}`, {
        method: "PUT",
        body: formDataToSend,
      })
      
      if (!response.ok) {
        throw new Error(`Error updating persona: ${response.status}`)
      }
      
      // Success
      toast({
        title: "Success!",
        description: "Your AI persona has been updated successfully.",
      })
      
      // Redirect to dashboard
      router.push("/dashboard")
    } catch (error) {
      console.error("Error saving persona:", error)
      setError(error instanceof Error ? error.message : "Failed to save persona")
    } finally {
      setLoading(false)
    }
  }
  
  // Function to generate system prompt based on product and persona info
  const generateSystemPrompt = (
    personaName: string,
    personaDescription: string,
    productName?: string,
    productDescription?: string,
    productLink?: string
  ) => {
    let prompt = `You are a virtual spokesperson named ${personaName || 'AI Assistant'}. ${personaDescription || ''} `
    
    if (productName) {
      prompt += `You are an expert on ${productName}. `
      
      if (productDescription) {
        prompt += `Here's important information about ${productName}: ${productDescription} `
      }
      
      if (productLink) {
        prompt += `You can refer users to this link for more information: ${productLink} `
      }
    }
    
    prompt += "Keep your responses helpful, concise, and focused on providing valuable information. " +
      "Always be friendly and professional."
    
    return prompt
  }
  
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target
    setFormData({
      ...formData,
      [name]: value
    })
  }

  const handleVoiceChange = (value: string) => {
    setFormData({
      ...formData,
      voice: value
    })
  }

  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0]
      setImage(file)
      
      // Create preview
      const reader = new FileReader()
      reader.onload = () => {
        setPreviewImage(reader.result as string)
      }
      reader.readAsDataURL(file)
    }
  }

  const handleGenerateFaceId = async () => {
    if (!image) {
      setError("Please upload an image first")
      return
    }
    
    // Check image size before attempting generation
    if (image.size > 10 * 1024 * 1024) { // 10MB limit
      setError("Image size exceeds 10MB limit. Please upload a smaller image.")
      return
    }
    
    // Clear any existing face generation data
    clearFaceGeneration()
    
    setIsGeneratingFace(true)
    setError(null)
    setSuccessMessage(null)
    
    try {
      // Attempt to generate a face ID using Simli's API
      console.log("Generating face ID from uploaded image...")
      const result = await generateFaceId(image, formData.name || "unnamed_persona")
      console.log("Successfully generated face ID:", result)
      
      if (!result || !result.faceId) {
        throw new Error("No face ID was returned from the API")
      }
      
      setFormData({
        ...formData,
        faceId: result.faceId
      })
      
      // Set additional state for queue status
      setIsCustomFaceInQueue(result.isInQueue)
      if (result.originalResponse) {
        setOriginalFaceResponse(result.originalResponse)
      }
      
      if (result.isInQueue) {
        // Handle queued face ID scenario
        setSuccessMessage(
          "Your custom face has been added to the processing queue! " +
          "This can take 1-3 minutes to complete. " +
          "We'll notify you when it's ready for preview generation."
        )
        
        // Set up periodic checking if needed
        if (result.originalResponse?.character_uid) {
          // Start polling immediately for status updates
          console.log("Face generation queued with character_uid:", result.originalResponse.character_uid)
        }
      } else {
        setSuccessMessage("Face ID generated successfully! Now proceed to Step 3 to generate a preview.")
      }
    } catch (error) {
      console.error("Error generating face ID:", error)
      
      // Extract error details for better messages
      let errorMsg = error instanceof Error ? error.message : "Failed to generate face"
      
      // Handle specific errors with better messages
      if (errorMsg.includes("512x512")) {
        errorMsg = "Image must be at least 512x512 pixels. Please upload a larger image."
      } else if (errorMsg.includes("502")) {
        errorMsg = "Server error when processing image. Please try again with a different image."
      }
      
      setError(errorMsg)
    } finally {
      setIsGeneratingFace(false)
    }
  }
  
  const handleGenerateAvatar = async () => {
    setIsGeneratingAvatar(true)
    setError(null)
    setSuccessMessage(null)
    setIsCustomFaceInQueue(false)
    setOriginalFaceResponse(null)
    
    try {
      // For demo/MVP purposes, we use a default face ID
      // In production, you would call an API to generate a custom avatar
      setFormData({
        ...formData,
        faceId: DEFAULT_FACE_ID // Use imported constant from simli-api.ts
      })
      
      setSuccessMessage("Pre-built avatar selected! Now proceed to Step 3 to generate a preview.")
    } catch (error) {
      console.error("Error generating avatar:", error)
      setError(error instanceof Error ? error.message : "Failed to generate avatar")
    } finally {
      setIsGeneratingAvatar(false)
    }
  }
  
  const handleGeneratePreview = async () => {
    if (!formData.faceId) {
      setError("Please generate a face ID or avatar first")
      return
    }
    
    // If the face is still in queue and not ready, show a helpful message
    if (isCustomFaceInQueue && !faceGenerationStatus.isReady) {
      setError(
        "Your custom face is still being processed. Please wait for it to complete before generating a preview. " +
        "You'll be notified when it's ready."
      )
      return
    }
    
    const previewText = formData.firstMessage || 
      `Hello, I'm ${formData.name || "your new AI assistant"}. How can I help you today?`
    
    setIsGeneratingPreview(true)
    setError(null)
    setSuccessMessage(null)
    
    try {
      // Check if the faceId is a UUID (character_uid format from queue)
      const isUuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(formData.faceId);
      
      // Log which ID we're using for clarity
      if (isUuid && isCustomFaceInQueue) {
        console.log(`Cannot generate preview with character_uid that's still being processed: ${formData.faceId}`);
        throw new Error("Your custom face is still being processed. Please wait until the face generation is complete.");
      } else {
        console.log(`Generating preview with face ID: ${formData.faceId}`);
      }
      
      // Try to get the ElevenLabs API key if needed
      let elevenLabsAPIKey;
      try {
        // Attempt to fetch ElevenLabs API key from server endpoint
        const response = await fetch('/api/simli/voice-api-key');
        if (response.ok) {
          const data = await response.json();
          if (data.ttsAPIKey) {
            console.log("Retrieved ElevenLabs API key for voice customization");
            elevenLabsAPIKey = data.ttsAPIKey;
          }
        }
      } catch (error) {
        console.log("Could not retrieve ElevenLabs API key, will try without it:", error);
      }
      
      // Pass the selected voice to the generateVideoPreview function
      const preview = await generateVideoPreview(
        previewText, 
        formData.faceId,
        formData.voice, // Pass the selected ElevenLabs voice ID
        elevenLabsAPIKey // Pass ElevenLabs API key if available
      )
      
      setVideoPreview(preview)
      setIsPreviewGenerated(true)
      setSuccessMessage("Video preview generated! You can now update your persona.")
    } catch (error) {
      console.error("Error generating preview:", error)
      
      // Extract error details for better messages
      let errorMsg = error instanceof Error ? error.message : "Failed to generate preview"
      
      // Handle specific errors with better messages
      if (errorMsg.includes("Invalid face ID")) {
        errorMsg = "Your custom face is still being processed. Please wait until face generation is complete before generating a preview."
      }
      
      setError(errorMsg)
    } finally {
      setIsGeneratingPreview(false)
    }
  }
  
  // Add a function to clear the face generation queue
  const clearFaceGeneration = () => {
    setIsCustomFaceInQueue(false);
    setOriginalFaceResponse(null);
    setFaceGenerationStatus({
      status: "not_started",
      progress: 0,
      isReady: false,
      message: "Face generation not started",
      lastChecked: 0
    });
    setSuccessMessage(null);
    setError(null);
    
    if (pollingTimeoutRef.current) {
      clearTimeout(pollingTimeoutRef.current);
      pollingTimeoutRef.current = null;
    }
    setIsPollingActive(false);
  }
  
  // Handle voice file upload
  const handleVoiceUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      // Check if file is audio
      if (!file.type.startsWith('audio/')) {
        setError("Please upload an audio file");
        return;
      }
      
      // Check file size (max 10MB)
      if (file.size > 10 * 1024 * 1024) {
        setError("Voice file must be less than 10MB");
        return;
      }
      
      setVoiceFile(file);
      setIsUploadingVoice(true);
      setError(null);
      
      // Create a preview URL
      const url = URL.createObjectURL(file);
      setVoicePreviewUrl(url);
      
      // Update form data
      setFormData(prev => ({
        ...prev,
        useCustomVoice: true
      }));
      
      setIsUploadingVoice(false);
      setSuccessMessage("Voice sample uploaded! Generate a preview to hear it.");
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-8">
      {/* Main form container with Framer-inspired design */}
      <motion.div 
        className="bg-white rounded-3xl shadow-lg overflow-hidden"
        style={{ boxShadow: "0 20px 60px -15px rgba(0,0,0,0.1)" }}
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, ease: [0.22, 1, 0.36, 1] }}
      >
        {/* Steps indicator */}
        <div className="py-5 px-8 flex justify-center">
          <div className="flex items-center gap-1">
            {[1, 2, 3].map(step => (
              <div key={step} className="flex items-center">
                <motion.div 
                  className={`w-10 h-10 rounded-full flex items-center justify-center text-white font-medium text-sm
                    ${activeStep >= step 
                      ? 'bg-gradient-to-r from-indigo-500 to-purple-500' 
                      : 'bg-gray-200'}`}
                  whileHover={activeStep >= step ? { scale: 1.05 } : {}}
                  whileTap={activeStep >= step ? { scale: 0.98 } : {}}
                  transition={{ duration: 0.2 }}
                >
                  {activeStep > step ? <Check className="w-5 h-5" /> : step}
                </motion.div>
                {step < 3 && (
                  <div className="flex items-center mx-2 w-20">
                    <motion.div 
                      className={`h-0.5 w-full ${activeStep > step ? 'bg-purple-500' : 'bg-gray-200'}`}
                      initial={{ width: "0%" }}
                      animate={{ width: "100%" }}
                      transition={{ duration: activeStep > step ? 0.5 : 0, delay: activeStep > step ? 0.2 : 0 }}
                    />
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>
        
        {/* Content sections - Framer style */}
        <div className="p-8">
          {/* Step 1: Basic Information */}
          <div className="transition-all duration-500">
            <motion.div
              className="flex items-center gap-2 mb-6"
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
            >
              <h2 className="text-2xl font-semibold bg-gradient-to-r from-indigo-500 to-purple-500 bg-clip-text text-transparent">Basic Information</h2>
            </motion.div>
"use client"

import { useState, useRef, useEffect } from "react"
import { useParams, useRouter } from "next/navigation"
import { useSession } from "next-auth/react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Label } from "@/components/ui/label"
import { 
  Loader2, ArrowLeft, Save, Upload, Check, Play, X,
  Mic, Image as ImageIcon, UserRound, Sparkles, RefreshCw,
  Volume2, User, Settings, InformationCircle
} from "lucide-react"
import Link from "next/link"
import Image from "next/image"
import { toast } from "@/components/ui/use-toast"
import { motion } from "framer-motion"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue, SelectGroup, SelectLabel } from "@/components/ui/select"
import { 
  generateFaceId, 
  generateVideoPreview, 
  DEFAULT_FACE_ID,
  checkFaceGenerationStatus 
} from "@/lib/simli-api"
import { DynamicNavbar } from "@/components/dynamic-navbar"
import { elevenLabsVoices, DEFAULT_VOICE } from '@/lib/voice-options'
import { Slider } from "@/components/ui/slider"

interface PersonaFormData {
  id?: string
  name: string
  description: string
  firstMessage: string
  faceId: string
  voice: string
  useCustomVoice: boolean
  productName: string
  productDescription: string
  productLink: string
  originalCharacterId?: string
  isCustomFaceInQueue?: boolean
}

interface PersonaData {
  id: string
  name: string
  description: string
  pageLink?: string
  adImage?: File | null
  voiceSample?: File | null
  systemPrompt?: string
  firstMessage?: string
  faceId?: string
  voice?: string
  qaPairs: Array<{
    id: string
    question: string
    answer: string
  }>
  productName?: string
  productDescription?: string
  productLink?: string
}

export default function EditPersonaPage() {
  const params = useParams()
  const router = useRouter()
  const { data: session, status } = useSession()
  const [loading, setLoading] = useState(true)
  const [persona, setPersona] = useState<PersonaData | null>(null)
  const [error, setError] = useState<string | null>(null)

  // If not authenticated, redirect to sign-in
  useEffect(() => {
    if (status === "unauthenticated") {
      router.push("/signin?callbackUrl=/edit/" + params.personaId)
    }
  }, [status, router, params.personaId])

  // Fetch persona data
  useEffect(() => {
    const fetchPersona = async () => {
      if (status !== "authenticated" || !params.personaId) return
      
      try {
        setLoading(true)
        const response = await fetch(`/api/personas/${params.personaId}`)
        
        if (!response.ok) {
          if (response.status === 404) {
            throw new Error("Persona not found")
          } else {
            throw new Error(`Error fetching persona: ${response.status}`)
          }
        }
        
        const data = await response.json()
        setPersona({
          id: data.id,
          name: data.name || data.productName,
          description: data.description,
          pageLink: data.pageLink,
          faceId: data.faceId,
          systemPrompt: data.systemPrompt,
          firstMessage: data.firstMessage,
          voice: data.voice || DEFAULT_VOICE,
          qaPairs: data.qaPairs || [],
          productName: data.productName,
          productDescription: data.productDescription,
          productLink: data.productLink
      })
    } catch (error) {
        console.error("Error fetching persona:", error)
        setError(error instanceof Error ? error.message : "Failed to load persona")
      } finally {
        setLoading(false)
      }
    }

    fetchPersona()
  }, [params.personaId, status])

  // Show loading or return null while checking authentication status
  if (status === "loading" || status === "unauthenticated") {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-pulse flex flex-col items-center">
          <div className="w-12 h-12 rounded-full bg-purple-200 mb-4"></div>
          <div className="h-4 w-32 bg-purple-100 rounded"></div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-slate-50 to-purple-50">
      <DynamicNavbar />
      
      <div className="container mx-auto max-w-6xl px-4 pt-24 pb-16">
        <div className="w-full max-w-5xl mx-auto">
          <div className="flex items-center justify-between mb-8">
            <motion.h1 
              className="text-4xl font-bold bg-gradient-to-r from-pink-500 to-violet-500 bg-clip-text text-transparent"
              initial={{ opacity: 0, y: -20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
            >
              Edit AI Persona
            </motion.h1>
            
            <Link href="/dashboard">
              <Button variant="outline" className="rounded-full border-2 border-gray-200 hover:border-gray-300">
                <ArrowLeft size={16} className="mr-2" />
                Back to Dashboard
              </Button>
            </Link>
          </div>
          
          {loading ? (
            <div className="flex items-center justify-center py-12">
              <Loader2 className="h-8 w-8 animate-spin text-gray-400" />
            </div>
          ) : error ? (
            <div className="bg-red-50 border border-red-200 rounded-lg p-4 text-red-600">
              {error}
            </div>
          ) : persona ? (
            <EditPersonaForm persona={persona} personaId={params.personaId as string} />
          ) : null}
        </div>
      </div>
    </div>
  )
}

interface EditPersonaFormProps {
  persona: PersonaData;
  personaId: string;
}

function EditPersonaForm({ persona, personaId }: EditPersonaFormProps) {
  const router = useRouter()
  const [loading, setLoading] = useState(false)
  const [formData, setFormData] = useState<PersonaFormData>({
    id: persona.id,
    name: persona.name || "",
    description: persona.description,
    firstMessage: persona.firstMessage || "",
    faceId: persona.faceId || "",
    voice: persona.voice || DEFAULT_VOICE,
    useCustomVoice: false,
    productName: persona.productName || "",
    productDescription: persona.productDescription || "",
    productLink: persona.productLink || "",
  })
  const [image, setImage] = useState<File | null>(null)
  const [previewImage, setPreviewImage] = useState<string | null>(null)
  const [isGeneratingFace, setIsGeneratingFace] = useState(false)
  const [isGeneratingAvatar, setIsGeneratingAvatar] = useState(false)
  const [videoPreview, setVideoPreview] = useState<{ mp4Url: string } | null>(null)
  const [isGeneratingPreview, setIsGeneratingPreview] = useState(false)
  const [activeStep, setActiveStep] = useState(1)
  const [error, setError] = useState<string | null>(null)
  const [successMessage, setSuccessMessage] = useState<string | null>(null)
  const [isPreviewGenerated, setIsPreviewGenerated] = useState(false)
  const [isCustomFaceInQueue, setIsCustomFaceInQueue] = useState(false)
  const [faceGenerationStatus, setFaceGenerationStatus] = useState<{
    isReady: boolean,
    progress: number,
    message: string,
    lastChecked: number,
    faceId?: string,
    failed?: boolean,
    status?: string
  }>({
    isReady: false,
    progress: 0,
    message: 'Not started',
    lastChecked: Date.now()
  })
  const [originalFaceResponse, setOriginalFaceResponse] = useState<any>(null)
  const [isPollingActive, setIsPollingActive] = useState(false)
  const pollingTimeoutRef = useRef<NodeJS.Timeout | null>(null)
  const fileInputRef = useRef<HTMLInputElement>(null)
  
  // Voice upload
  const [voiceFile, setVoiceFile] = useState<File | null>(null)
  const [isUploadingVoice, setIsUploadingVoice] = useState(false)
  const [voicePreviewUrl, setVoicePreviewUrl] = useState<string | null>(null)
  const voiceInputRef = useRef<HTMLInputElement>(null)
  
  // Processing timer
  const processingTimerRef = useRef<NodeJS.Timeout | null>(null);
  const [processingTime, setProcessingTime] = useState(0);
  
  // Helper function to format time as mm:ss
  const formatTime = (seconds: number): string => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };
  
  // Load persona image if available
  useEffect(() => {
    // If persona has faceId, set active step to at least 2
    if (persona.faceId) {
      setActiveStep(Math.max(activeStep, 2))
    }
    
    // Try to fetch the existing face image if available
    if (persona.faceId) {
      // Check if we have an existing preview for this persona
      const checkForExistingPreview = async () => {
        try {
          // For this example, we'll just set isPreviewGenerated to true
          // In a real implementation, you might want to check if a preview exists
          setIsPreviewGenerated(true)
        } catch (error) {
          console.error("Error checking for existing preview:", error)
        }
      }
      
      checkForExistingPreview()
    }
  }, [persona])

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)
    setError(null)
    
    try {
      // Check if we have a face ID
      if (!formData.faceId) {
        // Set default face ID if none exists
      setFormData(prev => ({
        ...prev,
          faceId: DEFAULT_FACE_ID
        }))
      }
      
      // Generate system prompt from product and persona information
      const systemPrompt = generateSystemPrompt(
        formData.name, 
        formData.description,
        formData.productName || undefined,
        formData.productDescription || undefined,
        formData.productLink || undefined
      )
      
      const firstMessage = formData.firstMessage || 
        `Hello, I'm ${formData.name}. How can I help you with ${formData.productName || 'your questions'} today?`
      
      // Create form data for file upload if we have a custom voice
      let voiceDataUrl = null;
      
      if (formData.useCustomVoice && voiceFile) {
        console.log("Using custom voice sample:", voiceFile.name);
        
        // Convert the audio file to a data URL for processing
        try {
          voiceDataUrl = await new Promise<string>((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = () => resolve(reader.result as string);
            reader.onerror = reject;
            reader.readAsDataURL(voiceFile);
          });
        } catch (error) {
          console.error("Error reading voice file:", error);
          // If there's an error, continue without the custom voice
          setError("Could not process voice file. Using default voice instead.");
          // Wait 3 seconds to let user see the error message
          await new Promise(resolve => setTimeout(resolve, 3000));
        }
      }
      
      console.log("Updating persona with settings:", {
        name: formData.name,
        description: formData.description,
        productName: formData.productName || 'N/A',
        productDescription: formData.productDescription ? (formData.productDescription.substring(0, 50) + "...") : 'N/A',
        productLink: formData.productLink || 'N/A',
        faceId: formData.faceId || DEFAULT_FACE_ID,
        originalCharacterId: isCustomFaceInQueue ? originalFaceResponse?.character_uid : undefined,
        voice: formData.voice,
        hasVoiceFile: !!voiceDataUrl,
        systemPrompt: systemPrompt.substring(0, 50) + "...",
        firstMessage: firstMessage
      })
      
      // Prepare data for API request
      const formDataToSend = new FormData()
      
      // Text fields
      formDataToSend.append("name", formData.name)
      formDataToSend.append("description", formData.description)
      formDataToSend.append("systemPrompt", systemPrompt)
      formDataToSend.append("firstMessage", firstMessage)
      formDataToSend.append("faceId", formData.faceId || DEFAULT_FACE_ID)
      formDataToSend.append("voice", formData.voice)
      formDataToSend.append("useCustomVoice", formData.useCustomVoice.toString())
      
      if (formData.productName) {
        formDataToSend.append("productName", formData.productName)
      }
      
      if (formData.productDescription) {
        formDataToSend.append("productDescription", formData.productDescription)
      }
      
      if (formData.productLink) {
        formDataToSend.append("productLink", formData.productLink)
      }
      
      if (isCustomFaceInQueue && originalFaceResponse?.character_uid) {
        formDataToSend.append("originalCharacterId", originalFaceResponse.character_uid)
      }
      
      formDataToSend.append("isCustomFaceInQueue", isCustomFaceInQueue.toString())
      
      // Append files if any
      if (image) {
        formDataToSend.append("image", image)
      }
      
      // Append voice data if available
      if (voiceDataUrl) {
        formDataToSend.append("voiceData", voiceDataUrl)
      }
      
      // Send the update request
      const response = await fetch(`/api/personas/${personaId}`, {
        method: "PUT",
        body: formDataToSend,
      })
      
      if (!response.ok) {
        throw new Error(`Error updating persona: ${response.status}`)
      }
      
      // Success
      toast({
        title: "Success!",
        description: "Your AI persona has been updated successfully.",
      })
      
      // Redirect to dashboard
      router.push("/dashboard")
    } catch (error) {
      console.error("Error saving persona:", error)
      setError(error instanceof Error ? error.message : "Failed to save persona")
    } finally {
      setLoading(false)
    }
  }
  
  // Function to generate system prompt based on product and persona info
  const generateSystemPrompt = (
    personaName: string,
    personaDescription: string,
    productName?: string,
    productDescription?: string,
    productLink?: string
  ) => {
    let prompt = `You are a virtual spokesperson named ${personaName || 'AI Assistant'}. ${personaDescription || ''} `
    
    if (productName) {
      prompt += `You are an expert on ${productName}. `
      
      if (productDescription) {
        prompt += `Here's important information about ${productName}: ${productDescription} `
      }
      
      if (productLink) {
        prompt += `You can refer users to this link for more information: ${productLink} `
      }
    }
    
    prompt += "Keep your responses helpful, concise, and focused on providing valuable information. " +
      "Always be friendly and professional."
    
    return prompt
  }
  
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target
    setFormData({
      ...formData,
      [name]: value
    })
  }
  
  const handleVoiceChange = (value: string) => {
    setFormData({
      ...formData,
      voice: value
    })
  }
  
  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0]
      setImage(file)
      
      // Create preview
      const reader = new FileReader()
      reader.onload = () => {
        setPreviewImage(reader.result as string)
      }
      reader.readAsDataURL(file)
    }
  }
  
  const handleGenerateFaceId = async () => {
    if (!image) {
      setError("Please upload an image first")
      return
    }
    
    // Check image size before attempting generation
    if (image.size > 10 * 1024 * 1024) { // 10MB limit
      setError("Image size exceeds 10MB limit. Please upload a smaller image.")
      return
    }
    
    // Clear any existing face generation data
    clearFaceGeneration()
    
    setIsGeneratingFace(true)
    setError(null)
    setSuccessMessage(null)
    
    try {
      // Attempt to generate a face ID using Simli's API
      console.log("Generating face ID from uploaded image...")
      const result = await generateFaceId(image, formData.name || "unnamed_persona")
      console.log("Successfully generated face ID:", result)
      
      if (!result || !result.faceId) {
        throw new Error("No face ID was returned from the API")
      }
      
      setFormData({
        ...formData,
        faceId: result.faceId
      })
      
      // Set additional state for queue status
      setIsCustomFaceInQueue(result.isInQueue)
      if (result.originalResponse) {
        setOriginalFaceResponse(result.originalResponse)
      }
      
      if (result.isInQueue) {
        // Handle queued face ID scenario
        setSuccessMessage(
          "Your custom face has been added to the processing queue! " +
          "This can take 1-3 minutes to complete. " +
          "We'll notify you when it's ready for preview generation."
        )
        
        // Set up periodic checking if needed
        if (result.originalResponse?.character_uid) {
          // Start polling immediately for status updates
          console.log("Face generation queued with character_uid:", result.originalResponse.character_uid)
        }
      } else {
        setSuccessMessage("Face ID generated successfully! Now proceed to Step 3 to generate a preview.")
      }
    } catch (error) {
      console.error("Error generating face ID:", error)
      
      // Extract error details for better messages
      let errorMsg = error instanceof Error ? error.message : "Failed to generate face"
      
      // Handle specific errors with better messages
      if (errorMsg.includes("512x512")) {
        errorMsg = "Image must be at least 512x512 pixels. Please upload a larger image."
      } else if (errorMsg.includes("502")) {
        errorMsg = "Server error when processing image. Please try again with a different image."
      }
      
      setError(errorMsg)
    } finally {
      setIsGeneratingFace(false)
    }
  }
  
  const handleGenerateAvatar = async () => {
    setIsGeneratingAvatar(true)
    setError(null)
    setSuccessMessage(null)
    setIsCustomFaceInQueue(false)
    setOriginalFaceResponse(null)
    
    try {
      // For demo/MVP purposes, we use a default face ID
      // In production, you would call an API to generate a custom avatar
      setFormData({
        ...formData,
        faceId: DEFAULT_FACE_ID // Use imported constant from simli-api.ts
      })
      
      setSuccessMessage("Pre-built avatar selected! Now proceed to Step 3 to generate a preview.")
    } catch (error) {
      console.error("Error generating avatar:", error)
      setError(error instanceof Error ? error.message : "Failed to generate avatar")
    } finally {
      setIsGeneratingAvatar(false)
    }
  }
  
  const handleGeneratePreview = async () => {
    if (!formData.faceId) {
      setError("Please generate a face ID or avatar first")
      return
    }
    
    // If the face is still in queue and not ready, show a helpful message
    if (isCustomFaceInQueue && !faceGenerationStatus.isReady) {
      setError(
        "Your custom face is still being processed. Please wait for it to complete before generating a preview. " +
        "You'll be notified when it's ready."
      )
      return
    }
    
    const previewText = formData.firstMessage || 
      `Hello, I'm ${formData.name || "your new AI assistant"}. How can I help you today?`
    
    setIsGeneratingPreview(true)
    setError(null)
    setSuccessMessage(null)
    
    try {
      // Check if the faceId is a UUID (character_uid format from queue)
      const isUuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(formData.faceId);
      
      // Log which ID we're using for clarity
      if (isUuid && isCustomFaceInQueue) {
        console.log(`Cannot generate preview with character_uid that's still being processed: ${formData.faceId}`);
        throw new Error("Your custom face is still being processed. Please wait until the face generation is complete.");
      } else {
        console.log(`Generating preview with face ID: ${formData.faceId}`);
      }
      
      // Try to get the ElevenLabs API key if needed
      let elevenLabsAPIKey;
      try {
        // Attempt to fetch ElevenLabs API key from server endpoint
        const response = await fetch('/api/simli/voice-api-key');
        if (response.ok) {
          const data = await response.json();
          if (data.ttsAPIKey) {
            console.log("Retrieved ElevenLabs API key for voice customization");
            elevenLabsAPIKey = data.ttsAPIKey;
          }
        }
      } catch (error) {
        console.log("Could not retrieve ElevenLabs API key, will try without it:", error);
      }
      
      // Pass the selected voice to the generateVideoPreview function
      const preview = await generateVideoPreview(
        previewText, 
        formData.faceId,
        formData.voice, // Pass the selected ElevenLabs voice ID
        elevenLabsAPIKey // Pass ElevenLabs API key if available
      )
      
      setVideoPreview(preview)
      setIsPreviewGenerated(true)
      setSuccessMessage("Video preview generated! You can now update your persona.")
    } catch (error) {
      console.error("Error generating preview:", error)
      
      // Extract error details for better messages
      let errorMsg = error instanceof Error ? error.message : "Failed to generate preview"
      
      // Handle specific errors with better messages
      if (errorMsg.includes("Invalid face ID")) {
        errorMsg = "Your custom face is still being processed. Please wait until face generation is complete before generating a preview."
      }
      
      setError(errorMsg)
    } finally {
      setIsGeneratingPreview(false)
    }
  }
  
  // Add a function to clear the face generation queue
  const clearFaceGeneration = () => {
    setIsCustomFaceInQueue(false);
    setOriginalFaceResponse(null);
    setFaceGenerationStatus({
      status: "not_started",
      progress: 0,
      isReady: false,
      message: "Face generation not started",
      lastChecked: 0
    });
    setSuccessMessage(null);
    setError(null);
    
    if (pollingTimeoutRef.current) {
      clearTimeout(pollingTimeoutRef.current);
      pollingTimeoutRef.current = null;
    }
    setIsPollingActive(false);
  }
  
  // Handle voice file upload
  const handleVoiceUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      // Check if file is audio
      if (!file.type.startsWith('audio/')) {
        setError("Please upload an audio file");
        return;
      }
      
      // Check file size (max 10MB)
      if (file.size > 10 * 1024 * 1024) {
        setError("Voice file must be less than 10MB");
        return;
      }
      
      setVoiceFile(file);
      setIsUploadingVoice(true);
      setError(null);
      
      // Create a preview URL
      const url = URL.createObjectURL(file);
      setVoicePreviewUrl(url);
      
      // Update form data
      setFormData(prev => ({
        ...prev,
        useCustomVoice: true
      }));
      
      setIsUploadingVoice(false);
      setSuccessMessage("Voice sample uploaded! Generate a preview to hear it.");
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-8">
      {/* Main form container with Framer-inspired design */}
      <motion.div 
        className="bg-white rounded-3xl shadow-lg overflow-hidden"
        style={{ boxShadow: "0 20px 60px -15px rgba(0,0,0,0.1)" }}
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, ease: [0.22, 1, 0.36, 1] }}
      >
        {/* Steps indicator */}
        <div className="py-5 px-8 flex justify-center">
          <div className="flex items-center gap-1">
            {[1, 2, 3].map(step => (
              <div key={step} className="flex items-center">
                <motion.div 
                  className={`w-10 h-10 rounded-full flex items-center justify-center text-white font-medium text-sm
                    ${activeStep >= step 
                      ? 'bg-gradient-to-r from-indigo-500 to-purple-500' 
                      : 'bg-gray-200'}`}
                  whileHover={activeStep >= step ? { scale: 1.05 } : {}}
                  whileTap={activeStep >= step ? { scale: 0.98 } : {}}
                  transition={{ duration: 0.2 }}
                >
                  {activeStep > step ? <Check className="w-5 h-5" /> : step}
                </motion.div>
                {step < 3 && (
                  <div className="flex items-center mx-2 w-20">
                    <motion.div 
                      className={`h-0.5 w-full ${activeStep > step ? 'bg-purple-500' : 'bg-gray-200'}`}
                      initial={{ width: "0%" }}
                      animate={{ width: "100%" }}
                      transition={{ duration: activeStep > step ? 0.5 : 0, delay: activeStep > step ? 0.2 : 0 }}
                    />
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>
        
        {/* Content sections - Framer style */}
        <div className="p-8">
          {/* Step 1: Basic Information */}
          <div className="transition-all duration-500">
            <motion.div
              className="flex items-center gap-2 mb-6"
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
            >
              <h2 className="text-2xl font-semibold bg-gradient-to-r from-indigo-500 to-purple-500 bg-clip-text text-transparent">Basic Information</h2>
            </motion.div>
        
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-5">
                <div className="space-y-2">
                  <Label htmlFor="name" className="text-base font-medium text-gray-700">Name</Label>
                  <Input 
              id="name"
              name="name"
              value={formData.name}
              onChange={handleChange}
                    placeholder="E.g., Business Advisor Bob"
                    className="p-3 text-base border-0 focus:ring-1 focus:ring-indigo-400 transition-all rounded-xl shadow-sm bg-gray-50"
              required
            />
          </div>
          
                <div className="space-y-2">
                  <Label htmlFor="description" className="text-base font-medium text-gray-700">Description</Label>
                  <Textarea 
              id="description"
              name="description"
              value={formData.description}
              onChange={handleChange}
                    placeholder="Describe the persona's background, expertise, and personality"
                    className="p-3 text-base border-0 focus:ring-1 focus:ring-indigo-400 transition-all rounded-xl shadow-sm bg-gray-50"
                    rows={3}
                  />
                </div>
              </div>
              
              <div className="space-y-5">
                <div className="space-y-2">
                  <Label htmlFor="productName" className="text-base font-medium text-gray-700">Product Name</Label>
                  <Input 
                    id="productName"
                    name="productName"
                    value={formData.productName}
                    onChange={handleChange}
                    placeholder="E.g., Smart Home Controller"
                    className="p-3 text-base border-0 focus:ring-1 focus:ring-indigo-400 transition-all rounded-xl shadow-sm bg-gray-50"
                      required
                    />
                  </div>
                  
                <div className="space-y-2">
                  <Label htmlFor="productDescription" className="text-base font-medium text-gray-700">Product Description</Label>
                  <Textarea 
                    id="productDescription"
                    name="productDescription"
                    value={formData.productDescription}
                    onChange={handleChange}
                    placeholder="Describe the product"
                    className="p-3 text-base border-0 focus:ring-1 focus:ring-indigo-400 transition-all rounded-xl shadow-sm bg-gray-50"
                      rows={3}
                  />
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="productLink" className="text-base font-medium text-gray-700">Product Link (Optional)</Label>
                  <Input 
                    id="productLink"
                    name="productLink"
                    value={formData.productLink}
              onChange={handleChange}
                    placeholder="https://example.com/product"
                    className="p-3 text-base border-0 focus:ring-1 focus:ring-indigo-400 transition-all rounded-xl shadow-sm bg-gray-50"
                    />
                  </div>
                  
                <div className="space-y-2">
                  <Label htmlFor="firstMessage" className="text-base font-medium text-gray-700">First Message (Optional)</Label>
                  <Textarea 
              id="firstMessage"
                      name="firstMessage"
                    value={formData.firstMessage}
              onChange={handleChange}
                    placeholder="First message to send when starting a conversation (auto-generated if left empty)"
                    className="p-3 text-base border-0 focus:ring-1 focus:ring-indigo-400 transition-all rounded-xl shadow-sm bg-gray-50"
                    rows={2}
                    />
                </div>
                  </div>
                </div>
              </div>
            
          {/* Divider */}
          <div className="my-8 border-t border-gray-100"></div>
          
          {/* Step 2: Appearance */}
          <div className="transition-all duration-500">
            <motion.div 
              className="flex items-center gap-2 mb-6"
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
            >
              <h2 className="text-2xl font-semibold bg-gradient-to-r from-indigo-500 to-purple-500 bg-clip-text text-transparent">Appearance</h2>
            </motion.div>
        
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              {/* Left column: Image upload */}
              <div className="space-y-6">
                <div className="bg-gradient-to-r from-pink-50 to-purple-50 p-6 rounded-2xl shadow-sm">
                  <h3 className="text-lg font-medium mb-4 flex items-center gap-2 text-gray-800">
                    <ImageIcon className="h-5 w-5 text-pink-500" />
                    Reference Image
                  </h3>
                  <div className="text-sm text-gray-700 mb-4 p-4 bg-white bg-opacity-60 rounded-xl">
                    <p className="font-medium mb-2">Image requirements:</p>
                    <ul className="list-disc ml-4 space-y-1 text-gray-600">
                      <li>Clear, front-facing photo of a face</li>
                      <li>Minimum resolution: 512x512 pixels</li>
                      <li>Maximum file size: 10MB</li>
                    </ul>
              </div>
                  <div className="flex flex-col items-center space-y-4">
                    {previewImage ? (
                      <motion.div 
                        className="relative w-48 h-48 rounded-2xl overflow-hidden shadow-md group"
                        initial={{ opacity: 0, scale: 0.9 }}
                        animate={{ opacity: 1, scale: 1 }}
                        transition={{ duration: 0.4 }}
                      >
                        <Image 
                            src={previewImage} 
                          alt="Preview" 
                          fill
                          className="object-cover transition-all group-hover:scale-105"
                        />
                        <button 
                          type="button"
                          onClick={() => {
                            setImage(null)
                            setPreviewImage(null)
                          }}
                          className="absolute top-2 right-2 bg-red-500 text-white p-1 rounded-full hover:bg-red-600 transition-colors duration-200"
                        >
                          <X size={16} />
                        </button>
                      </motion.div>
                    ) : (
                      <motion.div 
                        className="w-48 h-48 border-2 border-dashed border-pink-300 rounded-2xl flex items-center justify-center bg-white bg-opacity-50 cursor-pointer hover:border-pink-400 transition-all duration-300"
                        onClick={() => fileInputRef.current?.click()}
                        whileHover={{ scale: 1.02, boxShadow: "0 10px 25px -5px rgba(236, 72, 153, 0.1)" }}
                        whileTap={{ scale: 0.98 }}
                        transition={{ duration: 0.2 }}
                      >
                        <div className="text-center">
                          <Upload className="mx-auto h-12 w-12 text-pink-400" />
                          <p className="mt-2 text-sm text-gray-600">Upload an image</p>
                        </div>
                      </motion.div>
                    )}
                    
                    <input
                      ref={fileInputRef}
                      type="file"
                      accept="image/*"
                      onChange={handleImageUpload}
                      className="hidden"
                    />
                    
                      <Button 
                        type="button" 
                        variant="outline"
                        onClick={() => fileInputRef.current?.click()}
                      className="rounded-full border-2 border-pink-300 hover:border-pink-500 hover:bg-pink-50 text-pink-600 transition-all duration-300"
                      >
                      {previewImage ? "Change Image" : "Upload Image"}
                      </Button>
                  </div>
                </div>
              </div>
              
              {/* Right column: Face ID and Avatar options */}
              <div className="space-y-6">
                <div className="bg-gradient-to-r from-blue-50 to-indigo-50 p-6 rounded-2xl shadow-sm">
                  <h3 className="text-lg font-medium mb-4 flex items-center gap-2 text-gray-800">
                    <UserRound className="h-5 w-5 text-blue-500" />
                    Generate Face ID
                  </h3>
                  
                  {faceGenerationStatus.isReady ? (
                    <div className="mb-4 p-4 bg-green-50 rounded-xl text-sm text-green-800">
                      <p className="flex items-center gap-2">
                        <Check className="h-4 w-4 text-green-600" />
                        <span><strong>Face ready:</strong> Your custom face has been generated and is ready to use.</span>
                      </p>
                    </div>
                  ) : isCustomFaceInQueue ? (
                    <div className="mb-4 p-4 bg-indigo-50 rounded-xl text-sm text-indigo-800">
                      <p className="flex items-center gap-2">
                        <Loader2 className="h-4 w-4 animate-spin text-indigo-600" />
                        <span><strong>Face processing:</strong> {faceGenerationStatus.message}</span>
                      </p>
                      <div className="flex items-center justify-between mt-3 text-xs">
                        <span>Last checked: {faceGenerationStatus.lastChecked ? new Date(faceGenerationStatus.lastChecked).toLocaleTimeString() : 'N/A'}</span>
                        <button 
                          onClick={checkFaceStatus} 
                          className="bg-indigo-100 hover:bg-indigo-200 text-indigo-700 px-2 py-1 rounded-md flex items-center gap-1 transition-colors"
                          disabled={isPollingActive}
                        >
                          <RefreshCw className="h-3 w-3" />
                          Refresh Status
                        </button>
                      </div>
                    </div>
                  ) : (
                    <p className="text-sm text-gray-600 mb-4 p-4 bg-white bg-opacity-60 rounded-xl">
                      <strong>Step 1:</strong> Upload a reference image and generate a face ID using your image.
                      <span className="block mt-1 text-xs italic">
                        Note: Face generation takes 1-3 minutes to process. For faster results, use squared images under 1MB in size.
                      </span>
                    </p>
                  )}
                  
                    <Button
                      type="button"
                    disabled={!image || isGeneratingFace || (isCustomFaceInQueue && !faceGenerationStatus.isReady)}
                      onClick={handleGenerateFaceId}
                    className="w-full bg-gradient-to-r from-blue-500 to-indigo-500 hover:opacity-90 transition-opacity rounded-xl h-12"
                    >
                      {isGeneratingFace ? (
                      <>
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        Generating Face ID...
                      </>
                    ) : faceGenerationStatus.isReady ? (
                      <>
                        <Check className="mr-2 h-4 w-4" />
                        Face ID Generated
                      </>
                    ) : isCustomFaceInQueue ? (
                      <>
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        Face Generation in Progress...
                      </>
                    ) : (
                      <>
                        <UserRound className="mr-2 h-4 w-4" />
                        Generate Face ID
                      </>
                    )}
                    </Button>
                </div>
                
                {/* Only show avatar option if no custom face is being generated */}
                {!isCustomFaceInQueue && !faceGenerationStatus.isReady && (
                  <div className="bg-gradient-to-r from-purple-50 to-violet-50 p-6 rounded-2xl shadow-sm">
                    <h3 className="text-lg font-medium mb-4 flex items-center gap-2 text-gray-800">
                      <Sparkles className="h-5 w-5 text-purple-500" />
                      Generate Avatar
                    </h3>
                    <p className="text-sm text-gray-600 mb-4 p-4 bg-white bg-opacity-60 rounded-xl">
                      <strong>Alternative to Step 1:</strong> Skip image upload and use a pre-made AI avatar instead.
                    </p>
                    
                    <Button
                      type="button"
                      disabled={isGeneratingAvatar || Boolean(image && formData.faceId)}
                      onClick={handleGenerateAvatar}
                      className="w-full bg-gradient-to-r from-purple-500 to-violet-500 hover:opacity-90 transition-opacity rounded-xl h-12"
                    >
                      {isGeneratingAvatar ? (
                        <>
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                          Generating Avatar...
                        </>
                      ) : formData.faceId && !image ? (
                        <>
                          <Check className="mr-2 h-4 w-4" />
                          Avatar Generated
                        </>
                      ) : (
                        <>
                          <Sparkles className="mr-2 h-4 w-4" />
                          Generate Avatar
                        </>
                      )}
                    </Button>
                  </div>
                )}
              </div>
                  </div>
                </div>
                
          {/* Step 3: Voice */}
          <div className="transition-all duration-500">
            <motion.div 
              className="flex items-center gap-2 mb-6"
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
            >
              <h2 className="text-2xl font-semibold bg-gradient-to-r from-indigo-500 to-purple-500 bg-clip-text text-transparent">Voice</h2>
            </motion.div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              {/* Left column: Voice selection */}
              <div className="bg-gradient-to-r from-amber-50 to-yellow-50 p-6 rounded-2xl shadow-sm space-y-4">
                <h3 className="text-lg font-medium flex items-center gap-2 text-gray-800">
                  <Volume2 className="h-5 w-5 text-amber-500" />
                  Select Voice
                </h3>
                
                <div className="text-sm text-gray-700 p-4 bg-white bg-opacity-60 rounded-xl">
                  <p>Choose a voice that best represents your character&apos;s personality.</p>
                </div>
                
                <div className="space-y-4">
                  {/* Voice Gender Selection */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Voice Type</label>
                    <div className="flex space-x-2">
                      <Button
                        type="button"
                        onClick={() => setVoiceGender('male')}
                        variant={voiceGender === 'male' ? 'default' : 'outline'}
                        className={`flex-1 ${
                          voiceGender === 'male'
                            ? 'bg-amber-500 hover:bg-amber-600'
                            : 'border-amber-300 text-amber-700 hover:bg-amber-50'
                        }`}
                      >
                        <User className="mr-2 h-4 w-4" />
                        Male
                      </Button>
                      <Button
                        type="button"
                        onClick={() => setVoiceGender('female')}
                        variant={voiceGender === 'female' ? 'default' : 'outline'}
                        className={`flex-1 ${
                          voiceGender === 'female'
                            ? 'bg-amber-500 hover:bg-amber-600'
                            : 'border-amber-300 text-amber-700 hover:bg-amber-50'
                        }`}
                      >
                        <User className="mr-2 h-4 w-4" />
                        Female
                      </Button>
                    </div>
                  </div>
                  
                  {/* Voice Selection Dropdown */}
                    <div className="space-y-2">
                    <label htmlFor="voice" className="block text-sm font-medium text-gray-700">
                      Voice Selection
            </label>
            <Select
                      value={formData.voiceId || ''}
                      onValueChange={(value) => setFormData(prev => ({ ...prev, voiceId: value }))}
            >
                      <SelectTrigger className="w-full bg-white border-amber-300 focus:ring-amber-500">
                          <SelectValue placeholder="Select a voice" />
                        </SelectTrigger>
                        <SelectContent>
                        <SelectGroup>
                          <SelectLabel>Available Voices</SelectLabel>
                          {voiceOptions
                            .filter(voice => voice.gender.toLowerCase() === voiceGender)
                            .map(voice => (
                  <SelectItem key={voice.id} value={voice.id}>
                    {voice.name}
                  </SelectItem>
                ))}
                        </SelectGroup>
                        </SelectContent>
                      </Select>
                    </div>
            
                  {/* Voice Sample Button */}
                  {formData.voiceId && (
                    <div className="pt-2">
            <Button 
              type="button"
                        onClick={playVoiceSample}
                        disabled={isPlayingVoice}
                        variant="outline"
                        className="w-full border-amber-300 text-amber-700 hover:bg-amber-50"
                      >
                        {isPlayingVoice ? (
                          <>
                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                            Playing...
                          </>
                        ) : (
                          <>
                            <Volume2 className="mr-2 h-4 w-4" />
                            Play Sample
                          </>
                        )}
            </Button>
                    </div>
                  )}
                </div>
              </div>
              
              {/* Right column: Voice Settings/Effects */}
              <div className="bg-gradient-to-r from-cyan-50 to-blue-50 p-6 rounded-2xl shadow-sm space-y-4">
                <h3 className="text-lg font-medium flex items-center gap-2 text-gray-800">
                  <Settings className="h-5 w-5 text-cyan-500" />
                  Voice Settings
                </h3>
                
                <div className="text-sm text-gray-700 p-4 bg-white bg-opacity-60 rounded-xl">
                  <p>Adjust the voice characteristics to match your persona&apos;s speaking style.</p>
                </div>
                
                {/* Stability slider */}
                <div className="space-y-2">
                  <div className="flex justify-between items-center">
                    <label htmlFor="stability" className="block text-sm font-medium text-gray-700">
                      Stability
                    </label>
                    <span className="text-xs text-gray-500">
                      {typeof formData.stability === 'number' ? formData.stability.toFixed(1) : '0.5'}
                    </span>
                  </div>
                  <Slider
                    id="stability"
                    min={0}
                    max={1}
                    step={0.1}
                    value={[typeof formData.stability === 'number' ? formData.stability : 0.5]}
                    onValueChange={(value) => setFormData(prev => ({ ...prev, stability: value[0] }))}
                    className="py-2"
                  />
                  <div className="flex justify-between text-xs text-gray-500">
                    <span>More variable</span>
                    <span>More stable</span>
                  </div>
                </div>
                
                {/* Clarity/Similarity slider */}
                <div className="space-y-2">
                  <div className="flex justify-between items-center">
                    <label htmlFor="similarity" className="block text-sm font-medium text-gray-700">
                      Clarity/Similarity
                    </label>
                    <span className="text-xs text-gray-500">
                      {typeof formData.similarity === 'number' ? formData.similarity.toFixed(1) : '0.7'}
                    </span>
                  </div>
                  <Slider
                    id="similarity"
                    min={0}
                    max={1}
                    step={0.1}
                    value={[typeof formData.similarity === 'number' ? formData.similarity : 0.7]}
                    onValueChange={(value) => setFormData(prev => ({ ...prev, similarity: value[0] }))}
                    className="py-2"
                  />
                  <div className="flex justify-between text-xs text-gray-500">
                    <span>More unique</span>
                    <span>More similar</span>
                  </div>
                </div>
                
                <div className="pt-4">
                  <div className="text-xs text-gray-500 mb-2">
                    <p className="italic">
                      <InformationCircle className="inline h-3 w-3 mr-1" />
                      Pro tip: Higher stability makes the voice more consistent. Higher similarity makes it sound more like the reference voice.
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          {/* Step 4: Preview */}
          <div className="transition-all duration-500">
            <motion.div
              className="flex items-center gap-2 mb-6"
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
            >
              <h2 className="text-2xl font-semibold bg-gradient-to-r from-indigo-500 to-purple-500 bg-clip-text text-transparent">Preview</h2>
            </motion.div>
        
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-5">
                <div className="space-y-2">
                  <Label htmlFor="previewImage" className="text-base font-medium text-gray-700">Preview Image</Label>
                  {previewImage && (
                    <div className="relative rounded-xl overflow-hidden">
                      <img 
                        src={previewImage} 
                        alt="Preview" 
                        className="object-cover w-full h-full"
                      />
                    </div>
                  )}
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="previewText" className="text-base font-medium text-gray-700">Preview Text</Label>
                  <Textarea 
                    id="previewText"
                    name="previewText"
                    value={previewText}
                    onChange={(e) => setPreviewText(e.target.value)}
                    placeholder="Enter preview text"
                    className="p-3 text-base border-0 focus:ring-1 focus:ring-indigo-400 transition-all rounded-xl shadow-sm bg-gray-50"
                    rows={3}
                  />
                </div>
              </div>
              
              <div className="space-y-5">
                <div className="space-y-2">
                  <Label htmlFor="videoPreview" className="text-base font-medium text-gray-700">Video Preview</Label>
            {videoPreview && (
                    <div className="relative rounded-xl overflow-hidden">
                  <video
                    controls
                    className="w-full"
                    autoPlay
                  >
                    <source src={videoPreview.mp4Url} type="video/mp4" />
                    Your browser does not support the video tag.
                  </video>
              </div>
            )}
      </div>
      
                <div className="space-y-2">
                  <Label htmlFor="isGeneratingPreview" className="text-base font-medium text-gray-700">Generating Preview</Label>
                  <input
                    id="isGeneratingPreview"
                    name="isGeneratingPreview"
                    type="checkbox"
                    checked={isGeneratingPreview}
                    onChange={(e) => setIsGeneratingPreview(e.target.checked)}
                    className="p-3 text-base border-0 focus:ring-1 focus:ring-indigo-400 transition-all rounded-xl shadow-sm bg-gray-50"
          />
        </div>
      </div>
            </div>
          </div>
        </div>
      </motion.div>
      
      {/* Save Button */}
      <div className="flex justify-end pt-4">
        <motion.div
          whileHover={{ scale: 1.03 }}
          whileTap={{ scale: 0.97 }}
        >
          <Button 
            type="submit" 
            className="gap-2 bg-gradient-to-r from-pink-500 to-purple-600 hover:from-pink-600 hover:to-purple-700 text-white shadow-md hover:shadow-lg rounded-xl"
            disabled={loading || !formData.name || !formData.description}
          >
            {loading ? (
              <Loader2 className="h-4 w-4 animate-spin" />
            ) : (
              <Save className="h-4 w-4" />
            )}
            Save Changes
          </Button>
        </motion.div>
    </div>
    </form>
  )
} 