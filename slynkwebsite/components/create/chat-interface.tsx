"use client"

import type React from "react"

import { useState, useRef, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Send, Paperclip, Mic, ImageIcon, Bot } from "lucide-react"
import { motion } from "framer-motion"

interface Message {
  id: string
  content: string
  sender: "user" | "ai"
  timestamp: Date
}

export function ChatInterface() {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "1",
      content: "Hello! I'm your AI assistant. How can I help you today?",
      sender: "ai",
      timestamp: new Date(),
    },
  ])
  const [input, setInput] = useState("")
  const messagesEndRef = useRef<HTMLDivElement>(null)

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  const handleSend = () => {
    if (!input.trim()) return

    // Add user message
    const userMessage: Message = {
      id: Date.now().toString(),
      content: input,
      sender: "user",
      timestamp: new Date(),
    }
    setMessages((prev) => [...prev, userMessage])
    setInput("")

    // Simulate AI response after a short delay
    setTimeout(() => {
      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: "This is a simulated response. In a real application, this would be generated by an AI model.",
        sender: "ai",
        timestamp: new Date(),
      }
      setMessages((prev) => [...prev, aiMessage])
    }, 1000)
  }

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault()
      handleSend()
    }
  }

  return (
    <div className="flex h-screen flex-col">
      {/* Chat header */}
      <div className="border-b border-gray-200 bg-white p-4">
        <h1 className="text-xl font-semibold">AI Chat</h1>
        <p className="text-sm text-gray-500">Create AI-powered virtual spokespersons</p>
      </div>

      {/* Messages area */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {messages.map((message) => (
          <motion.div
            key={message.id}
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3 }}
            className={`flex ${message.sender === "user" ? "justify-end" : "justify-start"}`}
          >
            <div
              className={`max-w-[80%] rounded-lg p-4 ${
                message.sender === "user"
                  ? "bg-gradient-to-r from-pink-400 to-pink-600 text-white"
                  : "bg-gray-100 text-gray-800"
              }`}
            >
              {message.sender === "ai" && (
                <div className="mb-2 flex items-center gap-2">
                  <Bot size={16} className="text-pink-500" />
                  <span className="text-xs font-medium text-pink-500">Voxen AI</span>
                </div>
              )}
              <p className="text-sm">{message.content}</p>
              <p className="mt-1 text-right text-xs opacity-70">
                {message.timestamp.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })}
              </p>
            </div>
          </motion.div>
        ))}
        <div ref={messagesEndRef} />
      </div>

      {/* Input area */}
      <div className="border-t border-gray-200 bg-white p-4">
        <div className="flex items-end gap-2">
          <div className="flex-1">
            <Textarea
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={handleKeyDown}
              placeholder="Type your message..."
              className="min-h-[60px] resize-none border-gray-200 focus:border-pink-300 focus:ring-pink-300"
              rows={1}
            />
          </div>
          <div className="flex gap-2">
            <Button variant="outline" size="icon" className="rounded-full">
              <Paperclip size={18} />
            </Button>
            <Button variant="outline" size="icon" className="rounded-full">
              <ImageIcon size={18} />
            </Button>
            <Button variant="outline" size="icon" className="rounded-full">
              <Mic size={18} />
            </Button>
            <Button
              onClick={handleSend}
              disabled={!input.trim()}
              className="rounded-full bg-gradient-to-r from-pink-400 to-pink-600 text-white hover:opacity-90"
            >
              <Send size={18} />
            </Button>
          </div>
        </div>
      </div>
    </div>
  )
}
