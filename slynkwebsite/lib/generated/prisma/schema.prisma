// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  personas      AIPersona[]
  chatSessions  ChatSession[]
}

model AIPersona {
  id                  String         @id @default(cuid())
  name                String
  description         String
  pageLink            String?
  adImageUrl          String?
  voiceSampleUrl      String?
  faceId              String?
  simliSessionId      String?
  simliAgentId        String?
  systemPrompt        String?
  firstMessage        String?
  isCustomFaceInQueue Boolean        @default(false)
  productDescription  String?        @db.Text
  productImageUrl     String?
  metadata            Json?
  userId              String
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  qaPairs             QAPair[]
  sessions            ChatSession[]
  productVideos       ProductVideo[]
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProductVideo {
  id           String    @id @default(cuid())
  title        String
  description  String?   @db.Text
  videoUrl     String
  thumbnailUrl String?
  keywords     String?   @db.Text
  personaId    String
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  persona      AIPersona @relation(fields: [personaId], references: [id], onDelete: Cascade)
}

model QAPair {
  id                 String              @id @default(cuid())
  question           String
  answer             String
  personaId          String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  persona            AIPersona           @relation(fields: [personaId], references: [id], onDelete: Cascade)
  videoGenerationJob VideoGenerationJob?
}

model ChatSession {
  id        String        @id @default(cuid())
  personaId String
  userId    String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  messages  ChatMessage[]
  persona   AIPersona     @relation(fields: [personaId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChatMessage {
  id        String      @id @default(cuid())
  content   String
  isUser    Boolean     @default(false)
  sessionId String
  createdAt DateTime    @default(now())
  session   ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model VideoGenerationJob {
  id        String   @id @default(cuid())
  syncJobId String?  @unique
  status    String   @default("pending") // pending, processing, completed, failed
  resultUrl String?
  qaPairId  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  qaPair    QAPair   @relation(fields: [qaPairId], references: [id], onDelete: Cascade)

  @@index([qaPairId])
  @@index([status])
}
