generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  personas      AIPersona[]
  accounts      Account[]
  chatSessions  ChatSession[]
  sessions      Session[]
}

model AIPersona {
  id                  String        @id @default(cuid())
  name                String
  description         String
  pageLink            String?
  adImageUrl          String?
  voiceSampleUrl      String?
  faceId              String?
  simliSessionId      String?
  simliAgentId        String?
  systemPrompt        String?
  firstMessage        String?
  isCustomFaceInQueue Boolean       @default(false)
  voice               String?
  useCustomVoice      Boolean       @default(false)
  personaType         String?       @default("default")
  productName         String?
  productDescription  String?
  productLink         String?
  metadata            Json?
  userId              String
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessions            ChatSession[]
  qaPairs             QAPair[]
}

model QAPair {
  id        String    @id @default(cuid())
  question  String
  answer    String
  personaId String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  persona   AIPersona @relation(fields: [personaId], references: [id], onDelete: Cascade)
}

model ChatSession {
  id        String        @id @default(cuid())
  personaId String
  userId    String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  messages  ChatMessage[]
  persona   AIPersona     @relation(fields: [personaId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChatMessage {
  id        String      @id @default(cuid())
  content   String
  isUser    Boolean     @default(false)
  sessionId String
  createdAt DateTime    @default(now())
  session   ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}
